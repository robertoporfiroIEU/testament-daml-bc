module Main.Account (
  Account(..),
  CreateAccount(..), 
  SignAccountCreation(..),
  AddFunds(..),
  WithdrawFunds(..),
) where

import Main.Testament (assertNotAnnounced, Testament)
import Main.Util (contains, isNotBlank)


template Account 
  with
    holder : Text
    posession : Int
    bank : Party
    government : Party
  where
    signatory bank, government

    key (bank, holder) : (Party, Text)
    maintainer key._1

    ensure posession >= 0

    nonconsuming choice AddFunds : ContractId Account with
       amount : Int
     controller bank
        do
          testamentOpt <- lookupByKey @Testament (government, holder)          
          case testamentOpt of
            Some testamentId -> (fetch testamentId) >>= assertNotAnnounced
            None -> pure ()
          
          archive self 
          create this with posession = posession + amount
    
    nonconsuming choice WithdrawFunds : ContractId Account with
       amount : Int
     controller bank
        do          
          archive self 
          create this with posession = posession - amount      


template CreateAccount
  with
    holder : Text
    bank : Party
    government : Party
  where
    signatory bank
    observer government

    ensure bank `contains` "Bank"
      && government `contains` "Government"
      && isNotBlank holder

    choice SignAccountCreation : ContractId Account
     controller government
        do
          create Account with
            holder
            posession = 0
            bank
            government
