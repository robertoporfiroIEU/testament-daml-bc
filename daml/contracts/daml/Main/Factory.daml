module Main.Factory (
  NewFactoryProposal(..),
  CreateFactory(CreateFactory),
  TestamentFactory(..),
  IssueTestament(..),
  AnnounceExecution(..),
  ExecuteTestament(..),
) where


import DA.Foldable (forA_)
import DA.Functor (void, (<&>))
import DA.Map (Map)
import DA.Map as M (toList)
import DA.Optional (fromSomeNote)
import Main.Account (
  Account(Account, bank, government, holder, possession),
 )
import Main.Testament (
  assertNotAnnounced, 
  Testament(announced, bank, executed, government, inheritors, issuer, provider, Testament),
  validateInheritors,
 )
import Main.Util (contains, isNotBlank)


template TestamentFactory 
  with
    provider : Party
    government : Party
    bank : Party
  where
    signatory provider, government
    observer bank

    nonconsuming choice IssueTestament : ContractId Testament with
      issuer : Text
      inheritors : Map Text Int
     controller provider
        do 
          assertMsg "Issuer should not be blank" $ isNotBlank issuer
          validateInheritors inheritors

          create Testament with 
            issuer
            inheritors
            provider = provider
            government = government
            bank = None
            announced = False
            executed = False

    nonconsuming choice AnnounceExecution : ContractId Testament with
      issuer : Text
     controller government
        do
          (testamentId, testament) <- fetchTestament (government, issuer)

          assertNotAnnounced testament

          archive testamentId
          create testament with
            announced = True
            bank = Some bank

    nonconsuming choice ExecuteTestament : ContractId Testament with
      issuer : Text
     controller bank
        do
          (testamentId, testament) <- fetchTestament (government, issuer)

          assertMsg "Should not be executed" $ not testament.executed

          issuerAccountId <- lookupByKey @Account (bank, issuer)
            <&> fromSomeNote ("Account not found for " <> show (bank, issuer)) 
          issuerAccount <- fetch issuerAccountId

          forA_ (M.toList testament.inheritors) \(id, share) ->
            do
              let
                inherited = issuerAccount.possession * share / 10000

              optionalAccountId <- lookupByKey @Account (bank, id)
              inheritorPossession <- case optionalAccountId of
                Some accountId -> fetch accountId <&> possession
                None -> pure 0

              case optionalAccountId of
                Some accountId -> archive accountId
                None -> pure ()

              create Account with 
                holder = id
                possession = inheritorPossession + inherited
                bank
                government

          archive issuerAccountId
          void $ create issuerAccount with possession = 0

          archive testamentId
          create testament with executed = True


fetchTestament : (Party, Text) -> Update (ContractId Testament, Testament)
fetchTestament k = 
  do
    testamentId <- lookupByKey @Testament k 
      <&> fromSomeNote ("Testament not found for " <> show k)      
    testament <- fetch testamentId
    return (testamentId, testament)


template NewFactoryProposal 
  with
    provider : Party
    government : Party
    bank : Party
  where
    signatory provider
    observer government

    ensure provider `contains` "Provider"
      && government `contains` "Government"
      && bank `contains` "Bank"

    choice CreateFactory : ContractId TestamentFactory
     controller government
        do
          create TestamentFactory with provider, government, bank
