module Main.Testament (
  Testament(..), 
  UpdateInheritors(..),
  Revoke(..),
  assertNotAnnounced,
  validateInheritors,
) where

import DA.Map (Map)
import DA.Map qualified as M
import Main.Util (isNotBlank)


template Testament 
  with
    issuer : Text
    inheritors : Map Text Int
    provider : Party
    government : Party
    bank : Optional Party
    announced : Bool
    executed : Bool
  where
    signatory provider, government
    observer case bank of
      Some b -> [b]
      None -> []

    key (government, issuer) : (Party, Text)
    maintainer key._1

    nonconsuming choice UpdateInheritors : ContractId Testament with
      updatedInheritors : Map Text Int
     controller provider
        do
          validateInheritors updatedInheritors

          assertMsg "Inheritors should differ from existing" $ 
            updatedInheritors /= inheritors

          assertNotAnnounced this

          archive self
          create this with
            inheritors = updatedInheritors


    choice Revoke : () with
     controller provider
        do
          assertNotAnnounced this

          return ()


assertNotAnnounced : Testament -> Update () 
assertNotAnnounced testament = do
  assertMsg "Execution should not be announced" $ not testament.announced


validateInheritors : CanAssert m => Map Text Int -> m ()
validateInheritors inheritors = do
  assertMsg "Inheritors are not valid" $ 
    all isNotBlank (M.keys inheritors)
    && sum (M.values inheritors) == 10000
