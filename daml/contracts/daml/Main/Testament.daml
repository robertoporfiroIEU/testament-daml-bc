module Main.Testament where

import DA.Map (Map)
import DA.Map qualified as M
import DA.Text qualified as T

template Testament 
  with
    issuer : Text
    inheritors : Map Text Int
    updater : Party
    signer : Party
    observers : [Party]
    announced : Bool
    executed : Bool
  where
    signatory updater, signer
    observer observers

    key (updater, issuer) : (Party, Text)
    maintainer key._1

    choice Revoke : () with
     controller updater
        do
          return ()

class Proposal t where
  getIssuer : t -> Text
  getInheritors : t -> Map Text Int
  getProvider : t -> Party
  getGovernment : t -> Party


template IssueProposal
  with
    issuer : Text
    inheritors : Map Text Int
    provider : Party
    government : Party
  where
    signatory provider
    observer government

    ensure isValidProposal this

    choice SignIssue : ContractId Testament
      controller government
        do 
          create Testament with 
            issuer
            inheritors
            updater = provider
            signer = government
            observers = []
            announced = False
            executed = False

instance Proposal IssueProposal where
  getIssuer = issuer
  getInheritors = inheritors
  getProvider = provider
  getGovernment = government

template UpdateProposal
  with
    issuer : Text
    inheritors : Map Text Int
    provider : Party
    government : Party
  where
    signatory provider
    observer government

    ensure isValidProposal this

    choice SignUpdate : ContractId Testament
      controller government
        do 
          Some existingId <- lookupByKey @Testament (provider, issuer)
          existing <- fetch existingId
          archive existingId
          create existing with
            inheritors

instance Proposal UpdateProposal where
  getIssuer = issuer
  getInheritors = inheritors
  getProvider = provider
  getGovernment = government


isValidProposal : Proposal t => t -> Bool
isValidProposal proposal = isNotBlank (getIssuer proposal)
  && all isNotBlank (M.keys (getInheritors proposal))
  && sum (M.values (getInheritors proposal)) == 10000
  && partyToText (getProvider proposal) == "Provider"
  && partyToText (getGovernment proposal) == "Government"


isNotBlank : Text -> Bool
isNotBlank = not . T.isEmpty . T.trim
