module Main.Testament (
  Testament(..), 
  IssueProposal(..), 
  SignIssue(..), 
  UpdateInheritors(..),
  Revoke(..),
) where

import DA.Map (Map)
import DA.Map qualified as M
import DA.Text qualified as T

template Testament 
  with
    issuer : Text
    inheritors : Map Text Int
    provider : Party
    government : Party
    observers : [Party]
    announced : Bool
    executed : Bool
  where
    signatory provider, government
    observer observers

    key (provider, issuer) : (Party, Text)
    maintainer key._1

    nonconsuming choice UpdateInheritors : ContractId Testament with
      updatedInheritors : Map Text Int
     controller provider
        do
          assertMsg "Inheritors are not valid" $ 
            validateInheritors updatedInheritors

          assertMsg "Inheritors should differ from existing" $ 
            updatedInheritors /= inheritors

          archive self
          create this with
            inheritors = updatedInheritors


    choice Revoke : () with
     controller provider
        do
          return ()


template IssueProposal
  with
    issuer : Text
    inheritors : Map Text Int
    provider : Party
    government : Party
  where
    signatory provider
    observer government

    ensure isNotBlank issuer
      && validateInheritors inheritors
      && partyToText provider == "Provider"
      && partyToText government == "Government"

    choice SignIssue : ContractId Testament
      controller government
        do 
          create Testament with 
            issuer
            inheritors
            provider = provider
            government = government
            observers = []
            announced = False
            executed = False


validateInheritors : Map Text Int -> Bool
validateInheritors inheritors = 
  all isNotBlank (M.keys inheritors)
  && sum (M.values inheritors) == 10000


isNotBlank : Text -> Bool
isNotBlank = not . T.isEmpty . T.trim
