module Test.Util (
  allocateParties, 
  announceTestament,
  issueTestament, 
  TestParties(..), 
  validFactory,
  validInheritors, 
  validIssuer, 
) where

import Daml.Script (allocateParty, createCmd, exerciseCmd, Script)
import DA.Action (void)
import DA.Map qualified as M
import DA.Optional (fromOptional)
import Main.Factory (
  TestamentFactory(bank, government, provider, TestamentFactory),
  IssueTestament(inheritors, issuer, IssueTestament), 
  AnnounceExecution(AnnounceExecution, issuer),
 )
import Main.Testament (
  Testament,
 )


data TestParties = TestParties 
  with 
    provider : Party
    government : Party
    bank : Party
  deriving (Show)


allocateParties : Script TestParties
allocateParties = do
  provider <- allocateParty "Provider"
  government <- allocateParty "Government"
  bank <- allocateParty "Bank"

  return $ TestParties with 
    provider
    government
    bank


issueTestament : Party -> Optional Text -> Optional [(Text, Int)] -> ContractId TestamentFactory -> Script (ContractId Testament)
issueTestament provider issuerOpt inheritorsOpt factory = do 
  submit provider do 
    exerciseCmd factory IssueTestament with 
      issuer = fromOptional validIssuer issuerOpt
      inheritors = M.fromList $ fromOptional validInheritors inheritorsOpt


validFactory : TestParties -> TestamentFactory
validFactory TestParties { .. } = TestamentFactory with 
  provider = provider 
  government = government
  bank = bank


validIssuer : Text
validIssuer = "1"


validInheritors : [(Text, Int)]
validInheritors = [("2", 4000), ("3", 6000)]


announceTestament : TestParties -> Script (ContractId Testament)
announceTestament parties@(TestParties { .. }) = do
  factory <- submit government do
    createCmd $ validFactory parties
  void $ issueTestament provider None None factory

  submit government do
    exerciseCmd factory $ AnnounceExecution with issuer = validIssuer
