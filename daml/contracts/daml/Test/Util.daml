module Test.Util where

import Daml.Script
import DA.Foldable
import DA.Map qualified as M
import DA.Optional
import Main.Testament

data TestParties = TestParties 
  with 
    provider : Party
    government : Party
    bank : Party
  deriving (Show)


allocateParties : Script TestParties
allocateParties = do
  provider <- allocateParty "Provider"
  government <- allocateParty "Government"
  bank <- allocateParty "Bank"

  return $ TestParties with 
    provider
    government
    bank


issueTestament : Party -> Party -> Script (ContractId Testament)
issueTestament provider government = do 
  issueProposal <- submit provider do 
    createCmd $ validProposal provider government

  submit government do 
    exerciseCmd issueProposal SignIssue


validProposal : Party -> Party -> IssueProposal
validProposal = issueProposal None None


performCommonProposalValidations : 
  (Template t) => 
    TestParties 
    -> (Optional Text -> Optional [(Text, Int)] -> Party -> Party -> t) 
    -> Script ()
performCommonProposalValidations parties issueProposal = do
  let 
    TestParties { .. } = parties

  -- empty issuer
  submitMustFail provider do
    createCmd $ issueProposal (Some "") None provider government

   -- blank issuer
  submitMustFail provider do
    createCmd $ issueProposal (Some "   ") None provider government

  shouldValidateInheritors provider \inheritors -> do
      createCmd $ issueProposal None (Some inheritors) provider government


shouldValidateInheritors party action = do
  forA_ invalidInheritors $ \inheritors -> do
    submitMustFail party (action inheritors)


invalidInheritors : [[(Text, Int)]]
invalidInheritors = 
  [[("", 4000), ("3", 6000)], -- empty inheritor
   [("2", 4000), ("  ", 6000)], -- blank inheritor
   [("2", 4000), ("3", 6111)], -- shares > 10000
   [("2", 3000), ("3", 6000)], -- shares < 10000
   []] -- inheritors empty


validIssuer : Text
validIssuer = "1"


validInheritors : [(Text, Int)]
validInheritors = [("2", 4000), ("3", 6000)]


validTestament provider government = Testament with 
  issuer = validIssuer
  inheritors = M.fromList validInheritors
  provider
  government
  observers = []
  announced = False
  executed = False


issueProposal : Optional Text -> Optional [(Text, Int)] -> Party -> Party -> IssueProposal
issueProposal issuerOpt inheritorsOpt provider government = 
  let 
    issuer = fromOptional validIssuer issuerOpt
    inheritors = M.fromList $ fromOptional 
      validInheritors
      inheritorsOpt
  in
    IssueProposal with 
      issuer
      inheritors
      provider
      government
