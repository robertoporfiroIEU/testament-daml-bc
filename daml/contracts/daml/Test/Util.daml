module Test.Util (
  allocateParties, 
  announceTestament,
  issueProposal,
  issueTestament, 
  TestParties(..), 
  validInheritors, 
  validIssuer, 
  validProposal,
) where

import Daml.Script (allocateParty, createCmd, exerciseCmd, Script)
import DA.Map qualified as M
import DA.Optional (fromOptional)
import Main.Testament (
  IssueProposal(IssueProposal, inheritors, issuer, provider, government), 
  SignIssue(SignIssue), 
  Testament,
  AnnounceExecution(AnnounceExecution, bank),
 )

data TestParties = TestParties 
  with 
    provider : Party
    government : Party
    bank : Party
  deriving (Show)


allocateParties : Script TestParties
allocateParties = do
  provider <- allocateParty "Provider"
  government <- allocateParty "Government"
  bank <- allocateParty "Bank"

  return $ TestParties with 
    provider
    government
    bank


issueTestament : Party -> Party -> Script (ContractId Testament)
issueTestament provider government = do 
  proposal <- submit provider do 
    createCmd $ validProposal provider government

  submit government do 
    exerciseCmd proposal SignIssue


validProposal : Party -> Party -> IssueProposal
validProposal = issueProposal None None


validIssuer : Text
validIssuer = "1"


validInheritors : [(Text, Int)]
validInheritors = [("2", 4000), ("3", 6000)]


issueProposal : Optional Text -> Optional [(Text, Int)] -> Party -> Party -> IssueProposal
issueProposal issuerOpt inheritorsOpt provider government = 
  let 
    issuer = fromOptional validIssuer issuerOpt
    inheritors = M.fromList $ fromOptional 
      validInheritors
      inheritorsOpt
  in
    IssueProposal with 
      issuer
      inheritors
      provider
      government


announceTestament : TestParties -> Script (ContractId Testament)
announceTestament TestParties { .. } = do
  testament <- issueTestament provider government

  submit government do
    exerciseCmd testament AnnounceExecution with 
      bank
