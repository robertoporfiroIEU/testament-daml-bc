module Test.Util (
  allocateParties, 
  announceTestament,
  createValidFactory,
  issueTestament, 
  issueValidTestament,
  TestParties(..),
  validInheritors, 
  validIssuer, 
) where

import Daml.Script (allocateParty, Commands, createCmd, exerciseCmd, Script)
import DA.Action (void)
import DA.Map qualified as M
import DA.Optional (fromOptional)
import Main.Factory (
  NewFactoryProposal(bank, government, provider, NewFactoryProposal),
  CreateFactory(CreateFactory),
  TestamentFactory,
  IssueTestament(inheritors, issuer, IssueTestament), 
  AnnounceExecution(AnnounceExecution, issuer),
 )
import Main.Testament (
  Testament,
 )


data TestParties = TestParties 
  with 
    provider : Party
    government : Party
    bank : Party
  deriving (Show)


allocateParties : Script TestParties
allocateParties = do
  provider <- allocateParty "Provider"
  government <- allocateParty "Government"
  bank <- allocateParty "Bank"

  return $ TestParties with ..


issueValidTestament : ContractId TestamentFactory -> Party -> Script (ContractId Testament)
issueValidTestament factory provider =
  submit provider do 
    issueTestament factory None None


issueTestament : ContractId TestamentFactory -> Optional Text -> Optional [(Text, Int)] -> Commands (ContractId Testament)
issueTestament factory issuerOpt inheritorsOpt = do
  exerciseCmd factory IssueTestament with 
    issuer = fromOptional validIssuer issuerOpt
    inheritors = M.fromList $ fromOptional validInheritors inheritorsOpt


createValidFactory : TestParties -> Script (ContractId TestamentFactory)
createValidFactory parties@(TestParties { government, provider }) = do
  proposal <- submit provider do
    createCmd $ validFactoryProposal parties
  submit government do
    exerciseCmd proposal CreateFactory


validFactoryProposal : TestParties -> NewFactoryProposal
validFactoryProposal TestParties { .. } = NewFactoryProposal with ..


validIssuer : Text
validIssuer = "1"


validInheritors : [(Text, Int)]
validInheritors = [("2", 4000), ("3", 6000)]


announceTestament : TestParties -> Script (ContractId Testament)
announceTestament parties@(TestParties { .. }) = do
  factory <- createValidFactory parties
  void $ issueValidTestament factory provider

  submit government do
    exerciseCmd factory $ AnnounceExecution with issuer = validIssuer
