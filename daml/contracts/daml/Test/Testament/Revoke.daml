module Test.Testament.Revoke () where

import Daml.Script (exerciseCmd, queryContractKey, Script)
import DA.Assert (assertEq)
import Main.Testament (
  Revoke(Revoke), 
  Testament,
 )
import Test.Util (
  allocateParties, 
  announceTestament,
  bank,
  government, 
  issueTestament, 
  provider, 
  TestParties(TestParties),
  validIssuer,
 )
import Test.Testament.Util (
  validTestament,
 )


_should_revoke : Script ()
_should_revoke = do
  -- given
  TestParties { .. } <- allocateParties
  testament <- issueTestament provider government

  -- when
  submit provider do
    exerciseCmd testament Revoke

  -- then
  actualTestament <- queryContractKey 
    @Testament provider (provider, validIssuer)

  assertEq actualTestament None


_only_provider_should_revoke : Script ()
_only_provider_should_revoke = do
  -- given
  TestParties { .. } <- allocateParties
  testament <- issueTestament provider government

  -- when+then
  submitMustFail government do
    exerciseCmd testament Revoke


_should_not_revoke_revoked : Script ()
_should_not_revoke_revoked = do
  -- given
  TestParties { .. } <- allocateParties
  testament <- issueTestament provider government

  submit provider do
    exerciseCmd testament Revoke

  -- when+then
  submitMustFail provider do
    exerciseCmd testament Revoke


_should_not_revoke_announced : Script ()
_should_not_revoke_announced = do
  -- given
  parties@(TestParties { .. }) <- allocateParties
  announced <- announceTestament parties

  -- when
  submitMustFail provider do
    exerciseCmd announced Revoke

  -- then
  Some (_, actualTestament) <- queryContractKey 
    @Testament provider (government, validIssuer)

  assertEq actualTestament $ (validTestament provider government) with 
    announced = True
    observers = [bank]
