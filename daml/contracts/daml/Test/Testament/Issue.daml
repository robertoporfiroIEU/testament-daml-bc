module Test.Testament.Issue where

import Daml.Script
import Main.Testament
import DA.Assert
import DA.Map qualified as M
import Test.Util


should_issue_testament = do
  -- given
  TestParties { provider, government } <- allocateParties

  -- when
  issueProposal <- submit provider do
    createCmd $ validProposal provider government
  
  testament <- submit government do
    exerciseCmd issueProposal SignIssue

  -- then
  Some actualTestament <- queryContractId government testament
  
  assertEq actualTestament $ Testament with 
    issuer = validIssuer
    inheritors = M.fromList validInheritors
    updater = provider
    signer = government
    observers = []
    announced = False
    executed = False

  actualProposal <- queryContractId government issueProposal

  assertEq actualProposal None


should_validate_proposal = do
  parties@(TestParties { .. }) <- allocateParties

  performCommonProposalValidations parties $ proposal @IssueProposal

  -- TODO: unify these two submits as well
  -- only provider should issue
  submitMustFail bank do
    createCmd $ validProposal bank government

  -- only government should SignIssue
  submitMustFail provider do
    createCmd $ validProposal provider bank


should_not_issue_twice = do
  TestParties { provider, government } <- allocateParties

  initialProposal <- submit provider do
    createCmd $ validProposal provider government
  
  testament <- submit government do
    exerciseCmd initialProposal SignIssue

  -- issue same issueProposal twice
  submitMustFail government do
    exerciseCmd initialProposal SignIssue

  duplicateProposal <- submit provider do
    createCmd $ validProposal provider government

  -- issue same testament twice
  submitMustFail government do
    exerciseCmd duplicateProposal SignIssue


should_issue_after_revoke = do
  TestParties { provider, government } <- allocateParties

  initialProposal <- submit provider do
    createCmd $ validProposal provider government
  
  testament <- submit government do
    exerciseCmd initialProposal SignIssue

  -- issue same issueProposal twice
  submitMustFail government do
    exerciseCmd initialProposal SignIssue

  duplicateProposal <- submit provider do
    createCmd $ validProposal provider government

  -- issue same testament twice
  submitMustFail government do
    exerciseCmd duplicateProposal SignIssue
