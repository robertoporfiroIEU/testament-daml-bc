module Test.Testament.Issue () where

import Daml.Script (createCmd, exerciseCmd, queryContractId, Script)
import Main.Testament (SignIssue(SignIssue))
import DA.Action (void)
import DA.Assert (assertEq)
import Test.Util ( 
  allocateParties, 
  bank,
  government,
  issueProposal, 
  provider,
  TestParties(TestParties),
  validProposal, 
 )
import Test.Testament.Util (
  shouldValidateInheritors, 
  validTestament,
 )


_should_issue_testament : Script ()
_should_issue_testament = do
  -- given
  TestParties { .. } <- allocateParties

  -- when
  proposal <- submit provider do
    createCmd $ validProposal provider government
  
  testament <- submit government do
    exerciseCmd proposal SignIssue

  -- then
  Some actualTestament <- queryContractId government testament
  
  assertEq actualTestament $ validTestament provider government

  actualProposal <- queryContractId government proposal

  assertEq actualProposal None


_should_validate_proposal : Script ()
_should_validate_proposal = do
  -- given
  TestParties { .. } <- allocateParties

  -- empty issuer
  submitMustFail provider do
    createCmd $ issueProposal (Some "") None provider government

   -- blank issuer
  submitMustFail provider do
    createCmd $ issueProposal (Some "   ") None provider government

  shouldValidateInheritors provider \inheritors -> do
    createCmd $ issueProposal None (Some inheritors) provider government

  -- only provider should issue
  submitMustFail bank do
    createCmd $ validProposal bank government

  -- only government should SignIssue
  submitMustFail provider do
    createCmd $ validProposal provider bank


_should_not_issue_twice : Script ()
_should_not_issue_twice = do
  -- given
  TestParties { .. } <- allocateParties

  initialProposal <- submit provider do
    createCmd $ validProposal provider government
  
  void $ submit government do
    exerciseCmd initialProposal SignIssue

  -- issue same issueProposal twice
  submitMustFail government do
    exerciseCmd initialProposal SignIssue

  duplicateProposal <- submit provider do
    createCmd $ validProposal provider government

  -- issue same testament twice
  submitMustFail government do
    exerciseCmd duplicateProposal SignIssue


_should_issue_after_revoke : Script ()
_should_issue_after_revoke = do
  -- given
  TestParties { .. } <- allocateParties

  initialProposal <- submit provider do
    createCmd $ validProposal provider government
  
  void $ submit government do
    exerciseCmd initialProposal SignIssue

  -- issue same issueProposal twice
  submitMustFail government do
    exerciseCmd initialProposal SignIssue

  duplicateProposal <- submit provider do
    createCmd $ validProposal provider government

  -- issue same testament twice
  submitMustFail government do
    exerciseCmd duplicateProposal SignIssue
