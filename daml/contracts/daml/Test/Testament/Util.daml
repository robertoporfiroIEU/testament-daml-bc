module Test.Testament.Util (
  createFactoryAndIssueTestament,
  shouldValidateInheritors,
  validTestament,
) where

import Daml.Script (Commands, Script)
import DA.Foldable (forA_)
import DA.Map qualified as M
import Main.Testament (
  Testament(announced, bank, executed, government, inheritors, issuer, provider, Testament),
 )
import Test.Util (
  createValidFactory,
  issueValidTestament,
  TestParties(bank, government, provider, TestParties), 
  validInheritors, 
  validIssuer,
 )


shouldValidateInheritors : Party -> ([(Text, Int)] -> Commands a) -> Script ()
shouldValidateInheritors party action = do
  forA_ invalidInheritors $ \inheritors -> do
    submitMustFail party (action inheritors)


createFactoryAndIssueTestament : TestParties -> Script (ContractId Testament)
createFactoryAndIssueTestament parties@(TestParties { provider }) = do
  factory <- createValidFactory parties
  issueValidTestament factory provider


invalidInheritors : [[(Text, Int)]]
invalidInheritors = 
  [[("", 4000), ("3", 6000)], -- empty inheritor
   [("2", 4000), ("  ", 6000)], -- blank inheritor
   [("2", 4000), ("3", 6111)], -- shares > 10000
   [("2", 3000), ("3", 6000)], -- shares < 10000
   []] -- inheritors empty


validTestament : TestParties -> Testament
validTestament TestParties { provider, government, bank } = Testament with 
  issuer = validIssuer
  inheritors = M.fromList validInheritors
  provider
  government
  bank
  announced = False
  executed = False
