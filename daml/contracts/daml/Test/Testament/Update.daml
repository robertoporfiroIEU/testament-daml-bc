module Test.Testament.Update where

import Daml.Script
import DA.Assert
import DA.Map qualified as M
import Main.Testament
import Test.Util


updatedInheritorsValue = M.fromList [("2", 5000), ("3", 5000)]

should_update = do
  -- given
  TestParties { .. } <- allocateParties
  testament <- issueTestament provider government

  -- when
  testament <- submit provider do
    exerciseCmd testament UpdateInheritors with 
      updatedInheritors = updatedInheritorsValue

  -- then
  Some (_, actualTestament) <- queryContractKey 
    @Testament provider (provider, validIssuer)

  assertEq 
    actualTestament 
    (validTestament provider government) with 
      inheritors = updatedInheritorsValue


should_validate_on_update = do
  TestParties { .. } <- allocateParties
  testament <- issueTestament provider government

  shouldValidateInheritors provider \inheritors -> do
    exerciseCmd testament UpdateInheritors with 
      updatedInheritors = M.fromList inheritors


only_provider_should_update = do
  TestParties { .. } <- allocateParties
  testament <- issueTestament provider government

  submitMustFail government do
    exerciseCmd testament UpdateInheritors with 
      updatedInheritors = updatedInheritorsValue


update_should_differ_from_existing = do
  TestParties { .. } <- allocateParties
  testament <- issueTestament provider government

  submitMustFail provider do
    exerciseCmd testament UpdateInheritors with 
      updatedInheritors = M.fromList validInheritors

should_not_update_revoked : Script ()
should_not_update_revoked = do
  TestParties { .. } <- allocateParties
  testament <- issueTestament provider government
  submit provider do
    exerciseCmd testament Revoke

  submitMustFail provider do
    exerciseCmd testament UpdateInheritors with 
      updatedInheritors = updatedInheritorsValue


should_not_update_announced : Script ()
should_not_update_announced = do
  -- TODO: test
  return ()

