module Test.Testament.Update () where

import Daml.Script (exerciseCmd, queryContractKey, Script)
import DA.Action (void)
import DA.Assert (assertEq)
import DA.Map qualified as M
import Main.Testament (
  Revoke(Revoke), 
  Testament, 
  UpdateInheritors(updatedInheritors, UpdateInheritors),
 )
import Test.Util (
  bank,
  allocateParties, 
  announceTestament,
  government, 
  issueTestament, 
  provider, 
  TestParties(TestParties), 
  validInheritors,
  validIssuer, 
 )
import Test.Testament.Util (
  shouldValidateInheritors, 
  validTestament,
 )


updatedInheritorsValue : M.Map Text Int
updatedInheritorsValue = M.fromList [("2", 5000), ("3", 5000)]


_should_update : Script ()
_should_update = do
  -- given
  TestParties { .. } <- allocateParties
  testament <- issueTestament provider government

  -- when
  void $ submit provider do
    exerciseCmd testament UpdateInheritors with 
      updatedInheritors = updatedInheritorsValue

  -- then
  Some (_, actualTestament) <- queryContractKey 
    @Testament provider (government, validIssuer)

  assertEq 
    actualTestament 
    (validTestament provider government) with 
      inheritors = updatedInheritorsValue


_should_validate_on_update : Script ()
_should_validate_on_update = do
  -- given
  TestParties { .. } <- allocateParties
  testament <- issueTestament provider government

  -- when+then
  shouldValidateInheritors provider \inheritors -> do
    exerciseCmd testament UpdateInheritors with 
      updatedInheritors = M.fromList inheritors


_only_provider_should_update : Script ()
_only_provider_should_update = do
  -- given
  TestParties { .. } <- allocateParties
  testament <- issueTestament provider government

  -- when+then
  submitMustFail government do
    exerciseCmd testament UpdateInheritors with 
      updatedInheritors = updatedInheritorsValue


_update_should_differ_from_existing : Script ()
_update_should_differ_from_existing = do
  -- given
  TestParties { .. } <- allocateParties
  testament <- issueTestament provider government

  -- when+then
  submitMustFail provider do
    exerciseCmd testament UpdateInheritors with 
      updatedInheritors = M.fromList validInheritors

_should_not_update_revoked : Script ()
_should_not_update_revoked = do
  -- given
  TestParties { .. } <- allocateParties
  testament <- issueTestament provider government
  submit provider do
    exerciseCmd testament Revoke

  -- when+then
  submitMustFail provider do
    exerciseCmd testament UpdateInheritors with 
      updatedInheritors = updatedInheritorsValue


_should_not_update_announced : Script ()
_should_not_update_announced = do
  -- given
  parties@(TestParties { .. }) <- allocateParties
  announced <- announceTestament parties

  -- when+then
  submitMustFail provider do
    exerciseCmd announced UpdateInheritors with 
      updatedInheritors = updatedInheritorsValue
