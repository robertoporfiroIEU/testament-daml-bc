module Test.Testament.Execute () where


import Daml.Script (exerciseCmd, queryContractId, queryContractKey, Script)
import DA.Action (void)
import DA.Assert (assertEq)
import Main.Account (Account(Account, bank, holder, government, possession))
import Main.Factory (
  AnnounceExecution(AnnounceExecution, issuer),
  ExecuteTestament(ExecuteTestament, issuer),
 )
import Test.Util (
  allocateParties, 
  createValidFactory,
  issueValidTestament,
  TestParties(bank, government, provider, TestParties),
  validInheritors,
  validIssuer,
 )
import Test.Account.Util (
  fundAccount,
  fundIssuerAccount,
  validAccount,
 )
import Test.Testament.Util (  
  validTestament,
 )


_should_execute_testament : Script ()
_should_execute_testament = do
  -- given
  let
    initialPossession = 3000
    [(firstInheritor, firstInheritorShare), 
     (secondInheritor, secondInheritorShare)] = validInheritors
    secondInheritorPossession = 1500
    addedPossession share = initialPossession * share / 10000

  parties@(TestParties { .. }) <- allocateParties
  void $ fundIssuerAccount bank government initialPossession
  void $ fundAccount secondInheritor bank government secondInheritorPossession

  factory <- createValidFactory parties
  void $ issueValidTestament factory provider
  void $ submit government do
    exerciseCmd factory AnnounceExecution with issuer = validIssuer

  -- when
  executedId <- submit bank do
    exerciseCmd factory ExecuteTestament with issuer = validIssuer

  -- then
  Some actualTestament <- queryContractId provider executedId

  assertEq actualTestament (validTestament parties) with 
    announced = True
    executed = True

  Some (_, actualAccount) <- queryContractKey @Account government (bank, validIssuer)

  assertEq actualAccount $ (validAccount bank government) with possession = 0

  Some (_, firstInheritorAccount) <- queryContractKey @Account government (bank, firstInheritor)
  assertEq firstInheritorAccount $ Account with 
    holder = firstInheritor
    possession = addedPossession firstInheritorShare
    bank
    government

  Some (_, secondInheritorAccount) <- queryContractKey @Account government (bank, secondInheritor)
  assertEq secondInheritorAccount $ Account with 
    holder = secondInheritor
    possession = secondInheritorPossession + addedPossession secondInheritorShare
    bank
    government   


_only_bank_should_execute_testament : Script ()
_only_bank_should_execute_testament = do
  -- given
  parties@(TestParties { .. }) <- allocateParties
  void $ fundIssuerAccount bank government 3000

  factory <- createValidFactory parties
  void $ issueValidTestament factory provider
  void $ submit government do
    exerciseCmd factory AnnounceExecution with issuer = validIssuer

  -- when+then
  submitMustFail government do
    exerciseCmd factory ExecuteTestament with issuer = validIssuer


_should_not_execute_not_announced : Script ()
_should_not_execute_not_announced = do
    -- given
  parties@(TestParties { .. }) <- allocateParties
  void $ fundIssuerAccount bank government 3000

  factory <- createValidFactory parties
  void $ issueValidTestament factory provider

  -- when+then
  submitMustFail bank do
    exerciseCmd factory ExecuteTestament with issuer = validIssuer


_should_not_execute_executed : Script ()
_should_not_execute_executed = do
  -- given
  parties@(TestParties { .. }) <- allocateParties
  void $ fundIssuerAccount bank government 3000

  factory <- createValidFactory parties
  void $ issueValidTestament factory provider
  void $ submit government do
    exerciseCmd factory AnnounceExecution with issuer = validIssuer
  void $ submit bank do
    exerciseCmd factory ExecuteTestament with issuer = validIssuer

  -- when+then
  submitMustFail bank do
    exerciseCmd factory ExecuteTestament with issuer = validIssuer
