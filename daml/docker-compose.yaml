version: "3.9"

networks:
  local:
    name: testament_daml

services:
  prepare-sql.gov:
    build: 
      context: ./network
      dockerfile: Dockerfile.python
    image: daml/python
    command: sh -c "cd /scripts && 
      python 
        -u generate-init-db-script.py 
        --output /data/init-gov-db.sh 
        --database domain 
        --database government_ledger
        --database government_json"
    volumes:
      - data:/data
      - ./network/scripts/:/scripts
    networks:
      - local

  postgres.gov:
    image: postgres:14.5
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=postgres
      - SCRIPT_FILE=init-gov-db.sh
    shm_size: 256mb
    volumes:
      - ./network/scripts/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
      - data:/data
    networks:
      - local
    depends_on:
      - prepare-sql.gov

  domain:
    image: digitalasset/canton-open-source:2.3.3
    ports:
      - "5000:5000"
      - "5001:5001"
    command: daemon -c /configs/domain.conf
    environment:
      - POSTGRES_HOST=postgres.gov
      - POSTGRES_USER=domain
      - POSTGRES_DB=domain
      - POSTGRES_PASSWORD=domain
    volumes:
      - ./network/configs:/configs
    networks:
      - local
    depends_on:
      - postgres.gov

  contract-builder:
    image: digitalasset/daml-sdk:2.3.2
    user: root
    command: /scripts/build.sh
    environment:
      - WORKDIR=/contracts
    volumes:
      - ./contracts:/contracts
      - ./network/scripts:/scripts

  ledger.gov:
    image: digitalasset/canton-open-source:2.3.3
    ports:
      - "6000:6000"
      - "6001:6001"
    entrypoint: /scripts/start-ledger.sh
    environment:
      - PARTICIPANT_NAME=government
      - PARTICIPANT_USER=govadmin
      - JWKS_URL=http://auth.gov:8080/jwks
      - POSTGRES_HOST=postgres.gov
      - POSTGRES_USER=government_ledger
      - POSTGRES_DB=government_ledger
      - POSTGRES_PASSWORD=government_ledger
    volumes:
      - ./network/configs:/configs
      - ./network/scripts:/scripts
      - ./contracts/:/contracts
    networks:
      - local
    depends_on:
      - domain
      - contract-builder

  json.gov:
    build: 
      context: ./network
      dockerfile: Dockerfile.json
    image: daml/json-api
    ports:
      - "7575:7575"
    environment:
      - LEDGER_HOST=ledger.gov
      - LEDGER_PORT=6000
      - DB_USER=government_json
      - DB_PASSWORD=government_json
      - DB_URL=jdbc:postgresql://postgres.gov:5432/government_json
    volumes:
      - ./network/configs:/configs
    networks:
      - local
    depends_on:
      - ledger.gov

  auth.gov:
    build: 
      context: ./auth-server
    image: daml/auth-server
    ports:
      - "8080:8080"
    environment:
      - PARTICIPANT_USER=govadmin
      - PARTICIPANT_PASSWORD=govadminpassword
    networks:
      - local

  # TODO: setup nginx.gov

  prepare-sql.provider:
    build: 
      context: ./network
      dockerfile: Dockerfile.python
    image: daml/python
    command: sh -c "cd /scripts && 
      python 
        -u generate-init-db-script.py 
        --output /data/init-provider-db.sh 
        --database provider_ledger
        --database provider_json"
    volumes:
      - data:/data
      - ./network/scripts/:/scripts
    networks:
      - local

  postgres.provider:
    image: postgres:14.5
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_PASSWORD=postgres
      - SCRIPT_FILE=init-provider-db.sh
    shm_size: 256mb
    volumes:
      - ./network/scripts/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
      - data:/data
    networks:
      - local
    depends_on:
      - prepare-sql.provider

  ledger.provider:
    image: digitalasset/canton-open-source:2.3.3
    ports:
      - "6002:6000"
      - "6003:6001"
    entrypoint: /scripts/start-ledger.sh
    environment:
      - PARTICIPANT_NAME=provider
      - PARTICIPANT_USER=provider
      - JWKS_URL=http://auth.provider:8080/jwks
      - POSTGRES_HOST=postgres.provider
      - POSTGRES_USER=provider_ledger
      - POSTGRES_DB=provider_ledger
      - POSTGRES_PASSWORD=provider_ledger
    volumes:
      - ./network/configs:/configs
      - ./network/scripts:/scripts
      - ./contracts/:/contracts
    networks:
      - local
    depends_on:
      - postgres.provider
      - domain
      - contract-builder

  json.provider:
    build: 
      context: ./network
      dockerfile: Dockerfile.json
    image: daml/json-api
    ports:
      - "7576:7575"
    environment:
      - LEDGER_HOST=ledger.provider
      - LEDGER_PORT=6000
      - DB_USER=provider_json
      - DB_PASSWORD=provider_json
      - DB_URL=jdbc:postgresql://postgres.provider:5432/provider_json
    volumes:
      - ./network/configs:/configs
    networks:
      - local
    depends_on:
      - ledger.provider

  auth.provider:
    build: 
      context: ./auth-server
    image: daml/auth-server
    ports:
      - "8081:8080"
    environment:
      - PARTICIPANT_USER=provider
      - PARTICIPANT_PASSWORD=providerpassword
    networks:
      - local

  gateway.provider:
    build: 
      context: .
      dockerfile: network/Dockerfile.provider
    image: daml/provider-gateway
    ports:
      - "8083:8080"
    entrypoint: /scripts/start-provider.sh
    environment:
      - AUTH_SERVER_URL=http://auth.provider:8080
      - JSON_API_URL=http://json.provider:7575/v1
      - LEDGER_HOST=ledger.provider
      - LEDGER_PASSWORD=providerpassword
      - LEDGER_PORT=6000
      - LEDGER_USER=provider
    volumes:
      - data:/data
      - ./network/scripts:/scripts
    networks:
      - local
    depends_on:
      - auth.provider
      - ledger.provider
      - json.provider
      - create-factory

  prepare-sql.bank:
    build: 
      context: ./network
      dockerfile: Dockerfile.python
    image: daml/python
    command: sh -c "cd /scripts && 
      python 
        -u generate-init-db-script.py 
        --output /data/init-bank-db.sh 
        --database bank_ledger
        --database bank_json"
    volumes:
      - data:/data
      - ./network/scripts/:/scripts
    networks:
      - local

  postgres.bank:
    image: postgres:14.5
    ports:
      - "5434:5432"
    environment:
      - POSTGRES_PASSWORD=postgres
      - SCRIPT_FILE=init-bank-db.sh
    shm_size: 256mb
    volumes:
      - ./network/scripts/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
      - data:/data
    networks:
      - local
    depends_on:
      - prepare-sql.bank

  ledger.bank:
    image: digitalasset/canton-open-source:2.3.3
    ports:
      - "6004:6000"
      - "6005:6001"
    entrypoint: /scripts/start-ledger.sh
    environment:
      - PARTICIPANT_NAME=bank
      - PARTICIPANT_USER=bankadmin
      - JWKS_URL=http://auth.bank:8080/jwks
      - POSTGRES_HOST=postgres.bank
      - POSTGRES_USER=bank_ledger
      - POSTGRES_DB=bank_ledger
      - POSTGRES_PASSWORD=bank_ledger
    volumes:
      - ./network/configs:/configs
      - ./network/scripts:/scripts
      - ./contracts/:/contracts
    networks:
      - local
    depends_on:
      - postgres.bank
      - domain
      - contract-builder

  json.bank:
    build: 
      context: ./network
      dockerfile: Dockerfile.json
    image: daml/json-api
    ports:
      - "7577:7575"
    environment:
      - LEDGER_HOST=ledger.bank
      - LEDGER_PORT=6000
      - DB_USER=bank_json
      - DB_PASSWORD=bank_json
      - DB_URL=jdbc:postgresql://postgres.bank:5432/bank_json
    volumes:
      - ./network/configs:/configs
    networks:
      - local
    depends_on:
      - ledger.bank

  auth.bank:
    build: 
      context: ./auth-server
    image: daml/auth-server
    ports:
      - "8082:8080"
    environment:
      - PARTICIPANT_USER=bankadmin
      - PARTICIPANT_PASSWORD=bankadminpassword
    networks:
      - local

  # TODO: start bank gateway

  create-factory:
    build: 
      context: ./network
      dockerfile: Dockerfile.python
    image: daml/python
    command: "
      python -u /scripts/create-factory.py 
        --output /data/factory.json
        --provider-user provider
        --provider-password providerpassword
        --gov-user govadmin
        --gov-password govadminpassword
        --bank-user bankadmin
        --bank-password bankadminpassword"
    volumes:
      - data:/data
      - ./network/scripts/:/scripts
    networks:
      - local
    depends_on:
      - json.bank
      - json.gov
      - json.provider
      - auth.gov
      - auth.provider
      - auth.bank

volumes:
  data:
